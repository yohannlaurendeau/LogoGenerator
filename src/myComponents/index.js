const getBaseURL = () => {
	return new URL('.', import.meta.url);
};

class MyLogo extends HTMLElement {
    style = `
    @import url('https://fonts.googleapis.com/css2?family=Grey+Qo&display=swap');

    #logo {
        font-family: 'Grey Qo', cursive;
        color:red;
        font-size: 40px;
        border:5px solid green;
    }
    #feelingoptangry{
      display:none;
    }
    #feelingoptcalm{
      display:none;
    }
    #feelingoptsleepy{
      display:none;
    }
    #feelingoptexcited{
      display:none;
    }
    .focus-in-expand {
        -webkit-animation: focus-in-expand 0.8s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
                animation: focus-in-expand 0.8s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
    }
    .focus-in-expand-fwd {
        -webkit-animation: focus-in-expand-fwd 0.8s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
                animation: focus-in-expand-fwd 0.8s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
    }
    .tracking-in-expand {
        -webkit-animation: tracking-in-expand 0.7s cubic-bezier(0.215, 0.610, 0.355, 1.000) both;
                animation: tracking-in-expand 0.7s cubic-bezier(0.215, 0.610, 0.355, 1.000) both;
    }
    .scale-up-center {
      animation: scale-up-center 0.4s cubic-bezier(0.390, 0.575, 0.565, 1.000) both;
    }
    /* ----------------------------------------------
 * Generated by Animista on 2021-9-13 11:7:37
 * Licensed under FreeBSD License.
 * See http://animista.net/license for more info. 
 * w: http://animista.net, t: @cssanimista
 * ---------------------------------------------- */

/**
 * ----------------------------------------
 * animation focus-in-expand
 * ----------------------------------------
 */
@-webkit-keyframes focus-in-expand {
  0% {
    letter-spacing: -0.5em;
    -webkit-filter: blur(12px);
            filter: blur(12px);
    opacity: 0;
  }
  100% {
    -webkit-filter: blur(0px);
            filter: blur(0px);
    opacity: 1;
  }
}
@keyframes focus-in-expand {
  0% {
    letter-spacing: -0.5em;
    -webkit-filter: blur(12px);
            filter: blur(12px);
    opacity: 0;
  }
  100% {
    -webkit-filter: blur(0px);
            filter: blur(0px);
    opacity: 1;
  }
}
    

    /* ----------------------------------------------
 * Generated by Animista on 2021-9-20 9:19:32
 * Licensed under FreeBSD License.
 * See http://animista.net/license for more info. 
 * w: http://animista.net, t: @cssanimista
 * ---------------------------------------------- */

/**
 * ----------------------------------------
 * animation focus-in-expand-fwd
 * ----------------------------------------
 */
@-webkit-keyframes focus-in-expand-fwd {
  0% {
    letter-spacing: -0.5em;
    -webkit-transform: translateZ(-800px);
            transform: translateZ(-800px);
    -webkit-filter: blur(12px);
            filter: blur(12px);
    opacity: 0;
  }
  100% {
    -webkit-transform: translateZ(0);
            transform: translateZ(0);
    -webkit-filter: blur(0);
            filter: blur(0);
    opacity: 1;
  }
}
@keyframes focus-in-expand-fwd {
  0% {
    letter-spacing: -0.5em;
    -webkit-transform: translateZ(-800px);
            transform: translateZ(-800px);
    -webkit-filter: blur(12px);
            filter: blur(12px);
    opacity: 0;
  }
  100% {
    -webkit-transform: translateZ(0);
            transform: translateZ(0);
    -webkit-filter: blur(0);
            filter: blur(0);
    opacity: 1;
  }
}
/* ----------------------------------------------
 * Generated by Animista on 2021-9-23 9:46:53
 * Licensed under FreeBSD License.
 * See http://animista.net/license for more info. 
 * w: http://animista.net, t: @cssanimista
 * ---------------------------------------------- */

/**
 * ----------------------------------------
 * animation scale-up-center
 * ----------------------------------------
 */
@keyframes scale-up-center {
  0% {
    transform: scale(0.5);
  }
  100% {
    transform: scale(1);
  }
}

/* ----------------------------------------------
 * Generated by Animista on 2021-9-20 9:22:2
 * Licensed under FreeBSD License.
 * See http://animista.net/license for more info. 
 * w: http://animista.net, t: @cssanimista
 * ---------------------------------------------- */

/**
 * ----------------------------------------
 * animation tracking-in-expand
 * ----------------------------------------
 */
@-webkit-keyframes tracking-in-expand {
  0% {
    letter-spacing: -0.5em;
    opacity: 0;
  }
  40% {
    opacity: 0.6;
  }
  100% {
    opacity: 1;
  }
}
@keyframes tracking-in-expand {
  0% {
    letter-spacing: -0.5em;
    opacity: 0;
  }
  40% {
    opacity: 0.6;
  }
  100% {
    opacity: 1;
  }
}

    `;
    html = `
    <div id="logo" >mon logo 2
    
    </div>
        <br>
        Couleur : <input type="color" id="selecteurCouleur">
        <br>
        Taille : 5 <input type="range" val=40 min=5 max=100 
                          id="selecteurTaille"> 100
        <br>
        <div> Background color : <input type="color" id="selecteurBackCouleur"></div>

        <label for="select">Choose a background image:</label>

        <select id="select">
          <option value="">Select</option>
          <option value="angry">Angry</option>
          <option value="calm">calm</option>
   
</select>
<br>
<label for="selecteffect">Choose an effect:</label>

<select id="selecteffect">
<option value="">Select</option>
<option value="scale-up-center">Scale-up-center</option>


</select>
<button type="button" id="infinite">
    Add Infinite effect
</button>


       

    `;
    
    constructor() {
        super();
        // On crée le "shadow DOM"
        this.attachShadow({ mode: "open" });

        // récupérer les propriétés/attributs HTML
        this.couleur = this.getAttribute("couleur");
        if(!this.couleur) this.couleur = "black";

        console.log("couleur récupérée = " + this.couleur);

        this.text = this.getAttribute("text");
        this.animationClass = this.getAttribute("animation");
        this.controls = this.getAttribute("controls");
        this.size = this.getAttribute("size");
    }

    connectedCallback() {
        // ici on instancie l'interface graphique etc.
        this.shadowRoot.innerHTML = `<style>${this.style}</style>`
            + this.html;

        this.logo = this.shadowRoot.querySelector("#logo");
        // affecter les valeurs des attributs à la création
        this.logo.style.color = this.couleur;
        this.logo.classList.add(this.animationClass);
        this.declareEcouteurs();

        // On modifie les URLs relatifs
        this.fixRelativeURLs();
        
      
    }

    fixRelativeURLs() {
        let images = this.shadowRoot.querySelectorAll('img');
        images.forEach((e) => {
          console.log("dans le foreach")
          let imagePath = e.getAttribute('src');
            e.src = getBaseURL() + '/' + imagePath;
        });
    
        //console.log(getBaseURL() +  "images/flammes.jpg")
        //this.logo.style.background = "url(" + getBaseURL() + "images/flammes2.jpg)";
      }

    declareEcouteurs() {
        this.shadowRoot.querySelector("#selecteurCouleur")
            .addEventListener("input", (event) => {
                this.changeCouleur(event.target.value);
            });

        this.shadowRoot.querySelector("#selecteurTaille")
            .addEventListener("input", (event) => {
                this.changeSize(event.target.value);
            });
            this.shadowRoot.querySelector("#selecteurBackCouleur")
            .addEventListener("input", (event) => {
                this.changeBackgroundCouleur(event.target.value);
            });
            this.shadowRoot.querySelector("#select").addEventListener("input", (event) =>{
              this.generateImg(event);
            });
            this.shadowRoot.querySelector("#selecteffect").addEventListener("input",(event) =>{
              this.getstyle(event);
            });
            this.shadowRoot.querySelector("#infinite").addEventListener("click",(event) =>{
              this.infinite(event);
            });
    }

    // Fonction
    changeCouleur(val) {
        this.logo.style.color = val;
    }

    changeSize(val) {
        this.logo.style.fontSize = val + "px";
    }
    changeBackgroundCouleur(val){
      this.logo.style.backgroundColor = val;
    }
    
    
    generateImg(event) {
      console.log(event);
        if(event.target.value == "angry"){
          
        console.log("Hello");
        this.logo.style.background = "url(" + getBaseURL() + "images/flammes"+(Math.floor(Math.random() * 2))+".jpg)";
        }
        else if(event.target.value == "calm"){
          
          console.log("Hello");
          this.logo.style.background = "url(" + getBaseURL() + "images/calme"+(Math.floor(Math.random() * 2))+".jpg)";
          }
          
        
        //Pas oublier reset les options
     
}
getstyle(event) {
  console.log(this.logo.className);
  if(event.target.value="scale-up-center"){
    this.logo.className = "scale-up-center";
  }
  
  console.log(this.logo.className);
}

infinite(event) {
  //Essayer d ajouter effet infini
  console.log(this.logo.style.animation.infinite);
  
}
    
    
}

customElements.define("my-logo", MyLogo);
